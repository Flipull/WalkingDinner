@model WalkingDinnerWebApplication.ViewModels.EventSchemaViewModel
@{
    ViewBag.Title = "EventSchema Details";
}

<!--#region Map scripts-->
<script>
        var pathing = {};
        var markers = {};
        var current_state = 0;
        var isAnimating = false;
        //duo travel paths
        function BuildPaths(map) {

            @foreach(var data in Model.DuoData)
            {
                var duo = data.Key;

                <text>
                pathing['@duo.Id'] = [];
                </text>
                foreach (var path in data.Value)
                {
                    <text>
                    pathing['@duo.Id'].push({ lat: @path.Lat, lng: @path.Long});
                    </text>
                }
                var kleur = duo.GetHashCode()%(16*16*16);
                var kleur_hex = kleur.ToString("X").PadLeft(3,'0');

                <text>
                markers['@duo.Id'] = new google.maps.Marker({
                    position: pathing['@duo.Id'][0],
                    icon: "https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|@kleur_hex",
                    map: map
                });
                </text>
            }
            return [pathing, markers];
        }

        function InterpolateLatLng(geo1, geo2, perc) {
            return { lat: geo1.lat * (1-perc) + geo2.lat * perc, lng: geo1.lng * (1-perc) + geo2.lng * perc };
        }

        function InterpolateNextPaths(duration) {
            if (isAnimating == true) return;
            isAnimating = true;

            setTimeout(InterpolateAnimationFrame, 0);

            function InterpolateAnimationFrame(perc = 0) {
                var path_count = pathing[Object.keys(pathing)[0]].length;//determine length of path of first duo
                Object.keys(pathing).forEach(
                    function (key) {
                        markers[key].setPosition(
                            InterpolateLatLng(
                                pathing[key][current_state % path_count],
                                pathing[key][(current_state+1) % path_count],
                                perc/100
                                )
                            );
                    }
                );

                if (perc < 100) {
                    setTimeout(() => { InterpolateAnimationFrame(perc+1); }, 50);
                } else {
                    setTimeout(() => {
                        isAnimating = false;
                        current_state = (current_state + 1) % path_count;
                    }, 50);
                }
            }
        }

        // Initialize and add the map
        function initMap() {
            // The map
            var center_NL = new google.maps.LatLng(52.1076,5.34322);
            var map = new google.maps.Map(
                document.getElementById('map'), { zoom: 7, center: center_NL });

            BuildPaths(map);

            var markerBounds = new google.maps.LatLngBounds();

            Object.keys(markers).forEach((k) => {
                console.log(markers[k]);
                markerBounds.extend(markers[k].position);
            });

            setTimeout(() => {

                map.fitBounds(markerBounds);
            }, 1000);
        }
</script>
<!--#endregion-->
<!--#region Map style-->
<style>
    #map {
        height: 400px;
        width: 100%;
    }
</style>
<!--#endregion-->

<h2>@ViewBag.Title</h2>

<div class="row">
    <div class="col-lg-12">
        <dl class="dl-horizontal">
            <dt>@Html.DisplayNameFor(model => model.Naam)</dt>
            <dd>@Html.DisplayFor(model => model.Naam)</dd>

            <dt>@Html.DisplayNameFor(model => model.VerzamelDatum)</dt>
            <dd>@Html.DisplayFor(model => model.VerzamelDatum)</dd>

            <dt>@Html.DisplayNameFor(model => model.VerzamelAdres)</dt>
            <dd>@Html.DisplayFor(model => model.VerzamelAdres)</dd>

            <dt>@Html.DisplayNameFor(model => model.AantalDeelnemers)</dt>
            <dd>@Html.DisplayFor(model => model.AantalDeelnemers)</dd>

            <dt>@Html.DisplayNameFor(model => model.AantalGangen)</dt>
            <dd>@Html.DisplayFor(model => model.AantalGangen)</dd>
        </dl>
    </div>

    <button class="btn-default" style="margin:20px">Print PDF</button>
</div>

<div class="row">
    <h3>Groepsverdeling</h3>

    <div class="table-responsive">
        <table class="table-bordered">
            <thead>
                <tr>
                    <th width="90px">
                        
                    </th>
                    @for (int i = 1; i <= Model.AantalGroepenPerGang; i++)
                    {
                        <th>
                            Groep @i.ToString()
                        </th>
                    }
                </tr>
            </thead>

            <tbody>
                @foreach (var gang in Model.GroepsverdelingPerGang)
                {
                    <tr>
                        <td>
                            <b>Gang @gang.GangNummer.ToString()</b>
                            <small style="display: block;">
                                ( @gang.StartTijd.ToString("HH:mm") - @gang.EindTijd.ToString("HH:mm") )
                            </small>
                        </td>
                        @foreach (var groep in gang.Groepen)
                        {
                            <td>
                                <ul>
                                    <li>
                                        @groep.Host (host)
                                    </li>
                                    @foreach (var guest in groep.Gasten)
                                    {
                                        <li>
                                            @guest
                                        </li>
                                    }
                                </ul>

                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<hr />

<h3>Google Maps path animation demo</h3>
<button title="Volgende" onclick="InterpolateNextPaths(0);">test</button>
<div id="map"></div>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyARQfGWV2SmQh1Zk1Qu1frhIJOR_Eq1DcE&callback=initMap">
</script>